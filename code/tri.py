# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-04-11 14:22:57
"""
import arcpy
from arcpy.sa import *

def kat_tri_3x3_1m():  # kat_tri_3x3_1m

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
        Goondem = arcpy.Raster("kat_1mdemlid1")

        # Process: Copy Raster (Copy Raster) (management)
        apl4dr_rKATAL1_20180412_bb0m = "C:\\Users\\Jack\\Documents\\ArcGIS\\Projects\\hons_catalog_test\\hons_catalog_test.gdb\\apl4dr_rKATAL1_20180412_bb0m"
        with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
            arcpy.management.CopyRaster(in_raster=Goondem, out_rasterdataset=apl4dr_rKATAL1_20180412_bb0m, config_keyword="", background_value=None, nodata_value="3.4e+38", onebit_to_eightbit="NONE", colormap_to_RGB="NONE", pixel_type="", scale_pixel_value="NONE", RGB_to_Colormap="NONE", format="", transform="NONE", process_as_multidimensional="CURRENT_SLICE", build_multidimensional_transpose="NO_TRANSPOSE")

        # Process: Focal Statistics (Focal Statistics) (sa)
        apl4drKAT = "C:\\Users\\Jack\\Documents\\ArcGIS\\Projects\\hons_catalog_test\\cal_values_kat\\apl4drKAT"
        Focal_Statistics = apl4drKAT
        with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
            apl4drKAT = arcpy.sa.FocalStatistics(in_raster=apl4dr_rKATAL1_20180412_bb0m, neighborhood="Rectangle 3 3 CELL", statistics_type="MEAN", ignore_nodata="DATA", percentile_value=90)
            apl4drKAT.save(Focal_Statistics)


        # Process: Focal Statistics (2) (Focal Statistics) (sa)
        min_1m = "C:\\Users\\Jack\\Documents\\arc_file_24,3\\honours\\MyProject\\min_1m"
        Focal_Statistics_2_ = min_1m
        with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
            min_1m = arcpy.sa.FocalStatistics(in_raster=apl4dr_rKATAL1_20180412_bb0m, neighborhood="Rectangle 3 3 CELL", statistics_type="MINIMUM", ignore_nodata="DATA", percentile_value=90)
            min_1m.save(Focal_Statistics_2_)


        # Process: Focal Statistics (3) (Focal Statistics) (sa)
        max_1m = "C:\\Users\\Jack\\Documents\\arc_file_24,3\\honours\\MyProject\\max_1m"
        Focal_Statistics_3_ = max_1m
        with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
            max_1m = arcpy.sa.FocalStatistics(in_raster=apl4dr_rKATAL1_20180412_bb0m, neighborhood="Rectangle 3 3 CELL", statistics_type="MAXIMUM", ignore_nodata="DATA", percentile_value=90)
            max_1m.save(Focal_Statistics_3_)


        # Process: Raster Calculator (2) (Raster Calculator) (sa)
        kattrifinal = "C:\\Users\\Jack\\Documents\\ArcGIS\\Projects\\hons_catalog_test\\kattrifinal"
        Raster_Calculator_2_ = kattrifinal
        with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb", workspace=r"C:\Users\Jack\Documents\ArcGIS\Projects\hons_catalog_test\hons_catalog_test.gdb"):
            kattrifinal = (apl4drKAT - min_1m ) / (  max_1m - min_1m)
            kattrifinal.save(Raster_Calculator_2_)


if __name__ == '__main__':
    kat_tri_3x3_1m()
